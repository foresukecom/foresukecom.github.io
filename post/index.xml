<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ふぉれすけ広場</title>
    <link>http://foresukecom.github.io/post/</link>
    <description>Recent content in Posts on ふぉれすけ広場</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 13 Aug 2018 20:18:12 +0900</lastBuildDate>
    
	<atom:link href="http://foresukecom.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GAE上でGolangを動かしてみましたよ</title>
      <link>http://foresukecom.github.io/post/google_app_engine_go_ajax/</link>
      <pubDate>Mon, 13 Aug 2018 20:18:12 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/google_app_engine_go_ajax/</guid>
      <description>はじめに GoogleAppEngine上で動くwebサービスをgolangで作りはじめました。
作り始めでつまずくことが多いので自分用の最小構成メモです。 ここで説明するwebサービスは、Ajaxで非同期通信し、Golangが返した文字列を表示するだけのものです。
環境の準備 まずは、GCPの公式ドキュメントを参考にGolang、Cloud SDKをダウンロードします。
以下のようにバージョンが表示されればOKです。
$ goapp version go version 1.9.4 (appengine-1.9.74) darwin/amd64  ちなみに、開発にはmacOS High Sierra(10.13.6)を使用しています。
構成説明 ディレクトリ構成は以下の通りです。
├── app.yaml ├── hello.go └── static ├── js │ └── main.js ├── css │ └── main.css └── index.html  この中でGAE特有のファイルはapp.yamlになります。
app.yamlリファレンスに各パラメータの説明が載ってますが、最低限のパラメータだけ書いておきます。
runtime: go #Golangを使用する場合はgoを指定 api_version: go1 #最新のバージョンを使用する場合はgo1を指定 handlers: #リクエストと実行する処理をURLパターン毎に指定 - url: / static_files: static/index.html upload: static/index.html - url: /js static_dir: static/js - url: /css static_dir: static/css - url: /.</description>
    </item>
    
    <item>
      <title>英語漫画のススメ</title>
      <link>http://foresukecom.github.io/post/english_comic/</link>
      <pubDate>Sun, 20 May 2018 22:58:10 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/english_comic/</guid>
      <description> はじめに 最近、海外ドラマを観たりオンライン英会話を受けたりして英語を勉強しています。
しかし学生時代に英語の勉強をサボっていたので、わからない単語が多すぎて会話に付いていけず苦労しています。
単語帳なんかも買ってみたのですがすぐに飽きてしまったので、英語版HUNTER×HUNTERをKindleで買って試してみました。
 とりあえず飽きずに10巻まで読み進められたので、メリット/デメリットをまとめてみます。
メリット  なんとなく読める
僕は日本語版のHUNTER×HUNTERを何度も読み返しているので、英語版でも100％理解しなくても読み進めることができます。 すぐに買える
大型書店でないと英語版の漫画は売っていないと思います。(少なくとも僕は売っているのを見たことがありません。) 読みたい時にすぐ買えるのは電子書籍ならではです。 (紙版の本と比べると)安い
1冊だいたい850円ぐらいなので、日本語版と比べれば割高になります。 しかし、英語版HUNTER×HUNTERは紙の本では1冊1,000円ぐらいします。 翻訳コストがかかるので日本語版よりも高くなるのは仕方がありませんが、紙の本と比べて1〜2割引で買えるのはありがたい限りです。  デメリット  翻訳機能が使えない
Kindleでは漫画を画像として取り込んでいるので、セリフの検索や翻訳ができません。
しかし先日、Google I/O 2018で写真に写っているモノをAIが認識するGoogleLensというサービスが発表されました。 KindleはAmazonのサービスなので、Googleのサービスを使うとは思えませんが、こういった技術が発展すれば漫画の中の文字も翻訳対象として扱えるようになると思います。
最終的にはNetflixの音声や字幕のように、1冊の本を買ったら自由に言語を切り替えて読める世界になるのでしょうか。 英語がすべて大文字
理由は諸説あるようですが、アメリカンコミックではセリフが大文字で書かれていることが多いようです。 英語版HUNTER×HUNTERでは作者コメントは大文字と小文字が混ざっているのですが、セリフや説明分はすべて大文字で書かれています。 慣れの問題かもしれませんが、なかなか読みにくいものです。
  今後 HUNTER×HUNTERを読み終えたら、ハガレンかドラゴンボールに挑戦予定です。
ハガレンも日本語で何度も読み返しているから大丈夫でしょう。 実はドラゴンボールをしっかりと読んだことがないので、せっかくなので教養として読んでおこうかと。
3月のライオン、よつばと、ヨルムンガンドあたりもKindleで翻訳版が出てほしいのです。
  </description>
    </item>
    
    <item>
      <title>Go言語でJSONを作成したときのイージーミス</title>
      <link>http://foresukecom.github.io/post/golang_json_marshal/</link>
      <pubDate>Fri, 11 May 2018 05:19:00 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/golang_json_marshal/</guid>
      <description>はじめに Go言語を使って構造体をJSON形式に変換しようとしたら詰まったのでメモです。
JSON形式への変換は標準パッケージに含まれているjson.Marshalを使っています。
失敗例 こんな感じで構造体のスライスをJSONにしようとしたところ、作成されたJSONの中身が空になっていました。 
成功例 原因がわからなかったので色々と試行錯誤した結果、下記のコードで想定した動きを確認することができました。 失敗例では10〜12行目の構造体のフィード名の先頭文字を小文字にしていましたが、成功例では先頭文字を大文字に変えています。

原因 ここまで書けば原因がわかる方も多いと思いますが…
Go言語では変数や関数のスコープが先頭文字列が小文字か、大文字かで判定されます。 先頭文字が大文字の場合は他パッケージからの参照が可能(いわゆるpublic)、先頭文字が小文字の場合は他パッケージから参照不可(いわゆるprivate)となります。 このルールは構造体のフィードにも適用されます。
そのため、失敗例では構造体のフィードに対してパッケージ外からアクセスすることができず、作成されたJSONが空っぽになっていました。
ちなみに 作成されるJSONのKeyを先頭小文字にしたい場合、以下のようにフィードに対してタグをつけることで任意の名前を指定することができます。 
おわりに 初歩的なミスでしたが原因に気づくまで時間がかかってしまいました。 前に触ったことがあるはずなんですが…先頭文字でスコープが変化するのは慣れないと忘れちゃいますね。
コンパイルエラーとかで教えてくれないかなぁ。</description>
    </item>
    
    <item>
      <title>JavaからRESAS APIを使ってみましたよ</title>
      <link>http://foresukecom.github.io/post/resas_java/</link>
      <pubDate>Sat, 03 Feb 2018 13:33:02 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/resas_java/</guid>
      <description>お久しぶりです。
巷で話題のビッグデータを使って何かやってみようかと思い立ったので、RESASから情報を取得してみます。
RESASとは地域の活性を目的とし、市町村名一覧や人口構成、観光資源などの多くの情報を公開しているWebサイトです。
APIも公開されているので、かんたんに情報を取得することができます。
 地域経済分析システム（RESAS：リーサス）は、地方創生の様々な取り組みを情報面から支援するために、経済産業省と内閣官房（まち・ひと・しごと創生本部事務局）が提供しています。
自治体職員の方や、地域の活性化に関心を持つ様々な分野の方によって、効果的な施策の立案・実行・検証のためなどに広く利用されています。
引用元: RESAS 地域経済分析システム
 とりあえず今回は勉強がてら、Javaを使って都道府県の一覧を取得してみます。
※RESASのAPIを使うには利用登録をしてAPIキーを発行してもらう必要があります。利用登録は公式サイトから行えます。
RESAS-API利用登録
 以下のように結果が返ってきます。 JSON形式なので簡単に加工が出来そうです。
{ &amp;quot;message&amp;quot;: null, &amp;quot;result&amp;quot;: [ { &amp;quot;prefCode&amp;quot;: 1, &amp;quot;prefName&amp;quot;: &amp;quot;北海道&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 2, &amp;quot;prefName&amp;quot;: &amp;quot;青森県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 3, &amp;quot;prefName&amp;quot;: &amp;quot;岩手県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 4, &amp;quot;prefName&amp;quot;: &amp;quot;宮城県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 5, &amp;quot;prefName&amp;quot;: &amp;quot;秋田県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 6, &amp;quot;prefName&amp;quot;: &amp;quot;山形県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 7, &amp;quot;prefName&amp;quot;: &amp;quot;福島県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 8, &amp;quot;prefName&amp;quot;: &amp;quot;茨城県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 9, &amp;quot;prefName&amp;quot;: &amp;quot;栃木県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 10, &amp;quot;prefName&amp;quot;: &amp;quot;群馬県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 11, &amp;quot;prefName&amp;quot;: &amp;quot;埼玉県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 12, &amp;quot;prefName&amp;quot;: &amp;quot;千葉県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 13, &amp;quot;prefName&amp;quot;: &amp;quot;東京都&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 14, &amp;quot;prefName&amp;quot;: &amp;quot;神奈川県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 15, &amp;quot;prefName&amp;quot;: &amp;quot;新潟県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 16, &amp;quot;prefName&amp;quot;: &amp;quot;富山県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 17, &amp;quot;prefName&amp;quot;: &amp;quot;石川県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 18, &amp;quot;prefName&amp;quot;: &amp;quot;福井県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 19, &amp;quot;prefName&amp;quot;: &amp;quot;山梨県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 20, &amp;quot;prefName&amp;quot;: &amp;quot;長野県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 21, &amp;quot;prefName&amp;quot;: &amp;quot;岐阜県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 22, &amp;quot;prefName&amp;quot;: &amp;quot;静岡県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 23, &amp;quot;prefName&amp;quot;: &amp;quot;愛知県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 24, &amp;quot;prefName&amp;quot;: &amp;quot;三重県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 25, &amp;quot;prefName&amp;quot;: &amp;quot;滋賀県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 26, &amp;quot;prefName&amp;quot;: &amp;quot;京都府&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 27, &amp;quot;prefName&amp;quot;: &amp;quot;大阪府&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 28, &amp;quot;prefName&amp;quot;: &amp;quot;兵庫県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 29, &amp;quot;prefName&amp;quot;: &amp;quot;奈良県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 30, &amp;quot;prefName&amp;quot;: &amp;quot;和歌山県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 31, &amp;quot;prefName&amp;quot;: &amp;quot;鳥取県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 32, &amp;quot;prefName&amp;quot;: &amp;quot;島根県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 33, &amp;quot;prefName&amp;quot;: &amp;quot;岡山県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 34, &amp;quot;prefName&amp;quot;: &amp;quot;広島県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 35, &amp;quot;prefName&amp;quot;: &amp;quot;山口県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 36, &amp;quot;prefName&amp;quot;: &amp;quot;徳島県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 37, &amp;quot;prefName&amp;quot;: &amp;quot;香川県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 38, &amp;quot;prefName&amp;quot;: &amp;quot;愛媛県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 39, &amp;quot;prefName&amp;quot;: &amp;quot;高知県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 40, &amp;quot;prefName&amp;quot;: &amp;quot;福岡県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 41, &amp;quot;prefName&amp;quot;: &amp;quot;佐賀県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 42, &amp;quot;prefName&amp;quot;: &amp;quot;長崎県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 43, &amp;quot;prefName&amp;quot;: &amp;quot;熊本県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 44, &amp;quot;prefName&amp;quot;: &amp;quot;大分県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 45, &amp;quot;prefName&amp;quot;: &amp;quot;宮崎県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 46, &amp;quot;prefName&amp;quot;: &amp;quot;鹿児島県&amp;quot; }, { &amp;quot;prefCode&amp;quot;: 47, &amp;quot;prefName&amp;quot;: &amp;quot;沖縄県&amp;quot; } ] }  備考 モンハンワールドが面白すぎて…進捗ダメです。</description>
    </item>
    
    <item>
      <title>GoogleComputeEngineとのファイルやりとり</title>
      <link>http://foresukecom.github.io/post/gcp_scp/</link>
      <pubDate>Fri, 24 Nov 2017 05:20:15 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/gcp_scp/</guid>
      <description>GoogleComputeEngine(GCE)とファイルをやりとりする必要があったので方法を調べてみました。
gcloud compute scpでGCEとのファイルのアップロード/ダウンロードが行えます。 gcloud compute copy-filesでもファイルコピーが行えますが、非推奨となっているのでgcloud compute scpコマンドを使うのがいいようです。
ローカルのカレントディレクトリにあるファイルを、GCEの/tmp配下にアップロードするには以下のコマンドで行えます。
gcloud compute scp ./gokuhi.txt gce_server:/tmp/  逆に、GCEの/tmp配下のファイルを、ローカルのカレントディレクトリにダウンロードするには以下のコマンドです。
gcloud compute scp gce_server:/tmp/gokuhi.txt ./  公式ドキュメントにも記載されている通り、gcloud compute scpにもいろいろとオプションが用意されていますが、単純なファイルアップロード/ダウンロードであればオプションを付けなくても簡単に使うことができます</description>
    </item>
    
    <item>
      <title>DockerコンテナでDjango</title>
      <link>http://foresukecom.github.io/post/gcp_docker_django/</link>
      <pubDate>Sun, 05 Nov 2017 20:12:53 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/gcp_docker_django/</guid>
      <description>はじめに Dockerコンテナ上にDjangoの開発、実行環境を作りたいなぁ、と思ったので構築メモです。 Dockerエンジン自体はGoogleComputeEngine上で動かしています。
今回は、GCPのプロジェクトが作られている前提で説明を進めていきます。
GCEの仮想マシン作成などはWebUIからも作成できるのですが、説明が面倒くさいので今回はCloudShellからGCE仮想マシンを作って行きます。
CloudShellは、GCPのリソースを管理できる仮想マシンで、GCPのプロジェクトを作成していれば無料で使用することが可能です。 CloudShellの詳細は以下公式ドキュメントを参照してください。
Google Cloud Shell ドキュメント
今回、3つの仮想マシンを操作するので、混乱しないようにプロンプトに仮想マシンを示すようにしています。 使用する仮想マシンは以下の通りです。
   項目 説明     CloudShell GCPで標準で提供されている仮想マシン。   HostMachine DockerEngineが稼働する仮想マシン。OSはCentOS7です。   Container 実際にDjangoが動くDockerコンテナ。OSはCentOS7です。    全体的な流れ  GCEでCentOS7を作成、SSHで接続 docker導入 Dockerfile作成 Dockerイメージとコンテナを作って接続 djangoプロジェクト作成、allowhost設定 django開発用サーバ起動 ブラウザからアクセス  GCEでCentOS7を作成、SSHで接続 以下コマンドで、GCEをのインスタンスを作成します。 後半で必要になるので、作成したインスタンスのEXTERNAL_IP(外部IP)を控えておいてください。 その後、インスタンスに対してSSHで接続します。
(CloudShell)$ gcloud compute instances create example-name --tags http-server --zone asia-east1-a --image centos-7 (CloudShell)$ gcloud compute ssh example-name  GCEインスタンス作成時に使用したオプションは以下の通りです。
   オプション名 記事内の値 説明     INSTANCE_NAMES example-name GCEインスタンス名です。オプション名は指定する必要がありません。   zone asia-east1-a GCEインスタンスを作成するゾーンを指定します。指定しないと、対話形式でゾーンを指定することになります。   tags http-server GCEインスタンスに適用するファイアウォールを指定します。今回はHTTPでの接続を許可するファイアウォールを指定しています。   image centos-7 GCEインスタンスの元イメージです。デフォルトではdebian-9が指定されています。    docker導入 以下コマンドでDcokerをインストールし、有効化します。</description>
    </item>
    
    <item>
      <title>完全栄養食COMPを食べてます</title>
      <link>http://foresukecom.github.io/post/comp/</link>
      <pubDate>Sun, 29 Oct 2017 16:51:19 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/comp/</guid>
      <description> はじめに みなさんは完全栄養食COMPをご存知でしょうか。
完全栄養食の名の通り、これを食べるだけで必要な栄養素が取得できるという優れものです。 アメリカではソイレントが有名ですね。
概要 COMPはパウダータイプ(水などとシェイクして飲む)と、グミタイプの2種類を販売していますが、今回はパウダータイプのお話になります。
パウダータイプのCOMPには、400キロカロリーの小袋と、4,000キロカロリーの大袋が販売されています。 大袋で買った方が、カロリー単価の値段は安いのですが、僕は飲むときの手間が少ないことを優先して小袋を購入しています。
最初は1日3食なので、小袋で3袋分を摂取すれば必要な栄養素が摂取できると考えていました。 調べてみると、小袋3食分ということではなく、人間が生きるために必要なカロリー分のCOMPを飲めば必要な栄養素が摂取できる、ということでした。
必要なカロリーについては、COMP公式サイトをはじめ、いろいろなサイトに掲載されているのですが、体格、年齢、性別、運動量などが影響する関係でサイトに毎に必要なカロリーが異なっています。 いくつかのサイトから平均を取ったところ、僕の場合は2,000キロカロリー(±200キロカロリー)ぐらいが妥当みたいでした。 2,000キロカロリーをCOMPで摂取すると、小袋で5袋が必要になります。
さすがに、毎日5袋のCOMPを飲んで生活をするのは非人間的な気がするので、僕は朝食のみをCOMPで補い、昼夜は普通の食事を取るようにしています。
メリット COMPのメリットとしては、まず朝食の時間短縮が挙げられます。
朝食をCOMPにする前は、卵焼いてー、キャベツ千切りにしてー、適当な野菜でスムージー作ってー、と雑ながらも朝食を作っていました。 料理に慣れていないこともあり、作り始めてから片付けるまで1時間ぐらいかかっていました。 COMPにしてからは、作り始めてから片付けるまで10分以内に収まるようになりました。
直接的な食事時間以外にも、買い物の時間が短縮できたことも大きなメリットになります。 今までは週に2,3回は食材の買い出しに行っていたのですが、買い出しの頻度を減らすことができました。 スーパーに行くと、つい余計なものまで買ってしまうので、スーパーに行く頻度が下がったのは時間だけでなく、無駄遣い防止にも大きく貢献ししています。
また、冷蔵庫の中身を把握しておく必要がなくなったのは、精神的にかなり楽になりました。
朝食を作っていると、食材の残量を把握して、足りなければ買い出しをする必要が出てきます。 毎朝料理をするとなると、冷蔵庫の中身を気にする頻度も高くなり、それがストレスにつながっていました。。
今は週末にしか料理をしないので、平日に冷蔵庫の中身を気にする必要がなくなったので、ストレスフリーになりました。
おすすめの味 COMP自体は豆乳っぽい味なので、水に溶かして飲むのがベーシックなスタイルになります。
ベーシックな味があまり気に入らなかったので、以下を混ぜて作っています。
とりあえず、健康によさそうなものを入れてみたら美味しくなりました。
(純ココアはCOMPの鈴木社長が以前おすすめしていたので取り込んでいます。)
 COMP SAVAS(ココア味) ナチュラルヘルシースタンダード(ピーチ) 純ココア 調整豆乳
  まとめ 日本には「ハレとケ」の文化があります。
友人知人との会食や、時間があるときにはハレの食事として、美味しいものをのんびり食べる。 それ以外はケの食事として、最低限栄養の取れるものを食べる。 と、使い分けていけばいいのかな、と思っています。
   </description>
    </item>
    
    <item>
      <title>英語のお勉強</title>
      <link>http://foresukecom.github.io/post/english/</link>
      <pubDate>Tue, 24 Oct 2017 05:50:21 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/english/</guid>
      <description>はじめに みなさんは英語を使いこなしていますか。僕は使えません。
最近はGoogle翻訳の精度も上がりましたが、英語の講演を聞いたり、画像として表示されている英語を理解するためには自身の英語力を鍛える必要があります。
国内で開催されるAmazonWebServiceやGoogleCloudPlatformのイベント、セミナーによく参加しているのですが、英語の講演を理解できず、せっかくの貴重な機会を逃してしまうことが多々ありました。
なので、中学生レベルの英語力があるかも怪しい僕ですが、一念発起して英語の勉強を始めてみました。
試している勉強方法 とりあえず、英語を読む、聴くことが人並みになることが目標なので、Podcastを使ったリスニング、 Kindleでのリーディングを中心に進めています。
Podcast 通勤中に以下のPodcastを中心に聴いています。 アメリカとの文化の違いや、最近の時事問題をテーマにすることも多く、飽きずに聴き続ける事ができます。
 解説！1日5分ビジネス英語 Hapa英会話 Podcast バイリンガルニュース (Bilingual News)  以下のような英語のテック系Podcastも聴いています。 正直なところshow noteで概要を見ながら聴いても内容が聴き取れていません。
なので、これらのPodcastをスムーズに聴き取れることが現状の目的になっています。
 Python Bytes Google Cloud Platform Podcast  Kindle リーディングの勉強としては、Kindkeを使って、英語の絵本や童謡を読んでいます。
電子書籍であれば、わからない単語の翻訳も行えるので、なんとか読み進めることができます。 最初は絵本を読むことに恥ずかしさがあったのですが、読んで見ると読めない単語が多いことに気が付き、恥ずかしがっている場合ではないと腹をくくることができました。
最終的にはO&amp;rsquo;Reillyの洋書とか読みたいですね(格安、または無料で公開されている本も多くありますし)。
今のところ、読み終えた本は以下の通りです。

  Duolingo 無料で使える語学勉強用のWebサービスDuolingoも使っています。
このサービスはゲーム感覚でリスニングやリーディング能力を鍛えることができるので毎日続けています。 英文の意味を日本語で解答する問題では、日本語を入力して解答する都合上、文章の揺らぎが生まれるのですが、ある程度はDuolingo側で吸収してくれるので、自分の言葉で解答することができます。
問題を解いていると「あれ」「これ」「それ」がごっちゃになったり、代名詞の変化を忘れていたりするので、レベルの低さに落ち込むこともありますが、なのか続いています。 1回の学習が10分程度と短時間で完結し、PC版やスマホ版が出ているので、少し空いた時間にサクッとこなせるように設計されているようです。
おわりに 今のところ、スピーキングについては必要としていないのでスカイプ英会話などは使っていません。
海外の人と話したい欲求が生まれたら、スピーキングの勉強を始めてもいいかもしれません。</description>
    </item>
    
    <item>
      <title>カタカナ表記について</title>
      <link>http://foresukecom.github.io/post/katakana/</link>
      <pubDate>Sat, 21 Oct 2017 12:21:09 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/katakana/</guid>
      <description>はじめに 僕は工業高校の出身なのですが、当時プログラミングやネットワークを教えてくれた先生からComputerやrouterをカタカナで書くときには長音符は省略した方がいい」と教わってきました。
そのため「コンピュータ」「ルータ」のように末尾の長音符を省略して書いていました。
長音符を省略する理由については覚えていないのですが、おそらくJIS規格に準拠しようとしたのでしょう。
しかし、MicrosoftもWindows7から「コンピューター」「ディレクトリー」のように末尾に長音符をつけるようにしました。
最近は製品やメディアによって、長音符の有無がバラバラになっている状況になっています。
表記がブレると見栄えも悪くなり、検索も難しくなるので、少なくとも自分が自由に書く文章については、意識して表記を統一したいと考えています。 とりあえず、使用者が多いWindows製品を真似て、なるべく長音符を付ける方向で、テクニカルコミュニケーター協会が策定しているガイドラインに準拠していきます。
外来語（カタカナ）表記ガイドライン第3版
ガイドラインに様々な単語に対するカタカナ表記が記載されているので、これを元にしておけば統一感のでる文章が書けるようになります。
これまで、長音符を省略して書いていたので、慣れるまでは混ざってしまうかもしれませんが、徐々に慣れていきます。
ガイドラインに沿って書かれているかを判定してくれるツールがあると助かりますね。
蛇足 ちなみにガイドラインに沿った場合、profileはプロファイルと表記するようです。 ずっとプロフィールだと思ってました。
バトルロイヤルとバトルロワイヤルもごっちゃになっていましたが、バトルロイヤルはプロレスなどで全員敵の状態で戦うルールのこと(CoDでいうFree For Allですね)で、バトルロワイヤルは中学生が殺し合いをする小説、映画のタイトルということでした。
最近人気のPLAYERUNKNOWN&amp;rsquo;S BATTLEGROUNDS(通称:ドン勝)がバトルロワイヤルに影響を受けた、と書かれた記事が多くあるので混乱してしまいました。
この辺は、ガイドラインにも記載されていないので、それぞれの意味をググって正しい単語を選択しなくてはいけませんね。</description>
    </item>
    
    <item>
      <title>ブログ再開 -2017秋-</title>
      <link>http://foresukecom.github.io/post/restart/</link>
      <pubDate>Tue, 17 Oct 2017 07:55:56 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/restart/</guid>
      <description>ご挨拶 お久しぶりです、foresukeです。
転職、引越しなどがあり、ブログ更新が停滞していましたが、少しは落ち着いた感じがするので再開していきます。
ブログに慣れるまでは、質より量を優先してどんどん書いていきたいです。</description>
    </item>
    
    <item>
      <title>13日の金曜日です</title>
      <link>http://foresukecom.github.io/post/friday13th/</link>
      <pubDate>Fri, 13 Jan 2017 08:47:12 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/friday13th/</guid>
      <description>はじめに 2017年1月13日は金曜日です。 Wikipediaをみると諸説あるようですが、主に海外では縁起の悪い日として知られています。
 キリストの最後の晩餐に13人の人がいたことから、13は不吉な数とされた。また、キリストが金曜日に磔刑に処せられたとされていることから、13日の金曜日が不吉であるとされるようになった。一説には、イヴによるアダムの誘惑も大洪水からノアが脱出したのもバベルの塔が壊されたのも13日の金曜日だと言われるが、聖書にそのような記述はない。
北欧神話では12人の神が祝宴を催していた時に、13人目となる招かれざる客ロキが乱入して人気者のバルドルを殺してしまったとされ、キリスト教以前から13を不吉な数としており、13日の金曜日についても伝説を持つ。それは魔女としてキリスト教に追いやられたフリッグが11人の魔女と悪魔を招いて毎週金曜日に悪事を企んでいたからだという。なおゲルマン諸語で「金曜日」を表す語は「フリッグの日」に由来する。
フィリップ4世がフランス全土においてテンプル騎士団の壊滅を図るため、メンバーたちを一斉に逮捕したのが、1307年10月13日の金曜日だった。その後騎士団は異端とされ財産を没収の上解散、幹部たちを火刑に処している。 wikipedia
 21世紀に発生する13日の金曜日 そこで、21世紀に13日の金曜日が発生するタイミングを求めてみました。手作業で確認してもいいのですが、どうせなので勉強中のGo言語を使って楽をしています。
作成したプログラムは以下の通りです。
 21世紀に発生する13日の金曜日、CSVでの結果は以下の通りとなりました。
2000/10/13,2001/04/13,2001/07/13,2002/09/13,2002/12/13,2003/06/13,2004/02/13,2004/08/13,2005/05/13,2006/01/13,2006/10/13,2007/04/13,2007/07/13,2008/06/13,2009/02/13,2009/03/13,2009/11/13,2010/08/13,2011/05/13,2012/01/13,2012/04/13,2012/07/13,2013/09/13,2013/12/13,2014/06/13,2015/02/13,2015/03/13,2015/11/13,2016/05/13,2017/01/13,2017/10/13,2018/04/13,2018/07/13,2019/09/13,2019/12/13,2020/03/13,2020/11/13,2021/08/13,2022/05/13,2023/01/13,2023/10/13,2024/09/13,2024/12/13,2025/06/13,2026/02/13,2026/03/13,2026/11/13,2027/08/13,2028/10/13,2029/04/13,2029/07/13,2030/09/13,2030/12/13,2031/06/13,2032/02/13,2032/08/13,2033/05/13,2034/01/13,2034/10/13,2035/04/13,2035/07/13,2036/06/13,2037/02/13,2037/03/13,2037/11/13,2038/08/13,2039/05/13,2040/01/13,2040/04/13,2040/07/13,2041/09/13,2041/12/13,2042/06/13,2043/02/13,2043/03/13,2043/11/13,2044/05/13,2045/01/13,2045/10/13,2046/04/13,2046/07/13,2047/09/13,2047/12/13,2048/03/13,2048/11/13,2049/08/13,2050/05/13,2051/01/13,2051/10/13,2052/09/13,2052/12/13,2053/06/13,2054/02/13,2054/03/13,2054/11/13,2055/08/13,2056/10/13,2057/04/13,2057/07/13,2058/09/13,2058/12/13,2059/06/13,2060/02/13,2060/08/13,2061/05/13,2062/01/13,2062/10/13,2063/04/13,2063/07/13,2064/06/13,2065/02/13,2065/03/13,2065/11/13,2066/08/13,2067/05/13,2068/01/13,2068/04/13,2068/07/13,2069/09/13,2069/12/13,2070/06/13,2071/02/13,2071/03/13,2071/11/13,2072/05/13,2073/01/13,2073/10/13,2074/04/13,2074/07/13,2075/09/13,2075/12/13,2076/03/13,2076/11/13,2077/08/13,2078/05/13,2079/01/13,2079/10/13,2080/09/13,2080/12/13,2081/06/13,2082/02/13,2082/03/13,2082/11/13,2083/08/13,2084/10/13,2085/04/13,2085/07/13,2086/09/13,2086/12/13,2087/06/13,2088/02/13,2088/08/13,2089/05/13,2090/01/13,2090/10/13,2091/04/13,2091/07/13,2092/06/13,2093/02/13,2093/03/13,2093/11/13,2094/08/13,2095/05/13,2096/01/13,2096/04/13,2096/07/13,2097/09/13,2097/12/13,2098/06/13,2099/02/13,2099/03/13,2099/11/13,2100/08/13  13日の金曜日ということで、JSON形式でも出力できるようにしています。
[{&amp;quot;Year&amp;quot;:2000,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2001,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2001,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2002,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2002,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2003,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2004,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2004,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2005,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2006,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2006,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2007,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2007,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2008,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2009,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2009,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2009,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2010,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2011,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2012,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2012,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2012,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2013,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2013,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2014,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2015,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2015,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2015,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2016,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2017,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2017,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2018,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2018,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2019,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2019,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2020,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2020,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2021,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2022,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2023,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2023,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2024,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2024,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2025,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2026,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2026,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2026,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2027,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2028,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2029,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2029,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2030,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2030,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2031,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2032,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2032,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2033,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2034,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2034,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2035,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2035,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2036,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2037,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2037,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2037,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2038,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2039,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2040,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2040,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2040,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2041,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2041,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2042,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2043,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2043,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2043,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2044,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2045,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2045,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2046,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2046,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2047,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2047,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2048,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2048,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2049,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2050,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2051,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2051,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2052,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2052,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2053,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2054,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2054,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2054,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2055,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2056,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2057,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2057,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2058,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2058,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2059,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2060,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2060,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2061,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2062,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2062,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2063,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2063,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2064,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2065,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2065,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2065,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2066,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2067,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2068,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2068,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2068,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2069,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2069,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2070,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2071,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2071,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2071,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2072,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2073,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2073,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2074,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2074,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2075,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2075,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2076,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2076,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2077,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2078,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2079,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2079,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2080,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2080,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2081,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2082,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2082,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2082,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2083,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2084,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2085,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2085,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2086,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2086,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2087,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2088,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2088,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2089,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2090,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2090,&amp;quot;Month&amp;quot;:10,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2091,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2091,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2092,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2093,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2093,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2093,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2094,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2095,&amp;quot;Month&amp;quot;:5,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2096,&amp;quot;Month&amp;quot;:1,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2096,&amp;quot;Month&amp;quot;:4,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2096,&amp;quot;Month&amp;quot;:7,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2097,&amp;quot;Month&amp;quot;:9,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2097,&amp;quot;Month&amp;quot;:12,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2098,&amp;quot;Month&amp;quot;:6,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2099,&amp;quot;Month&amp;quot;:2,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2099,&amp;quot;Month&amp;quot;:3,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2099,&amp;quot;Month&amp;quot;:11,&amp;quot;Day&amp;quot;:13},{&amp;quot;Year&amp;quot;:2100,&amp;quot;Month&amp;quot;:8,&amp;quot;Day&amp;quot;:13}]  おわりに 日本で仏滅を忌嫌うように、海外では13日の金曜日を嫌っている人がいる…かもしれません。 グローバルな社会を生きる我々は、様々な文化の中で親しまれている、吉日や凶日を知っておくべきではないのでしょうか。</description>
    </item>
    
    <item>
      <title>Pocketからお祝いメールが届きました</title>
      <link>http://foresukecom.github.io/post/pocket_mail/</link>
      <pubDate>Thu, 22 Dec 2016 07:50:59 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/pocket_mail/</guid>
      <description>みなさんは、「あとで読む」サービスのPocketを使用していますか?
僕はスマートフォンでニュースを読んだり、ブラウジングしたときに、気になる記事を一時保管するために以前から使っています。
先日、Pocketから以下のようなメールが届きました。
 Congratulations!
We’re thrilled to let you know that you’re one of the top 5% of readers in Pocket for 2016! To celebrate, we&amp;rsquo;ve put together your very own Year in Review page with some fun stats to review and share.
 どうやら、Pocketの使用頻度が高いユーザになれたようです。確かに毎日のようにPocketは使っていますが、一般的な使い方をしているつもりなので、上位5%に含まれているとは驚きです。
今後は、Pocketヘビーユーザの自覚を持ち、真摯にサービスと向き合っていきたいと思います。
とりあえず、未読の記事が溜まっているので消化していかなきゃですね…</description>
    </item>
    
    <item>
      <title>再帰処理してみた</title>
      <link>http://foresukecom.github.io/post/recursion/</link>
      <pubDate>Wed, 30 Nov 2016 22:21:13 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/recursion/</guid>
      <description>はじめに Go言語を使っているときに、「再帰処理できるのか?」と疑問に思ったので試してみました。
どういった問題が再帰処理に向いているのか分からないので、とりあえず素数判定の処理を作成しています。
素数判定 標準入力された数値が素数か判断するプログラムです。

これを元に、標準入力された数値以下の素数をすべて出力するプログラムも作ってみました。

おわりに 今回は、再帰処理が行えることの確認がメインテーマです。100万以下のすべての素数を求めたところ、2時間20分かかりました。効率とか速度とかは度外視しているので、その辺は何卒ご容赦下さい。
学生時代、再帰処理の課題に苦労し「全部while文でいいじゃねぇか」と思っていましたが、再帰処理が使えてよかったと思える場面が来るのでしょうか。</description>
    </item>
    
    <item>
      <title>8進数のエラーについて</title>
      <link>http://foresukecom.github.io/post/octal/</link>
      <pubDate>Wed, 30 Nov 2016 21:26:57 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/octal/</guid>
      <description>はじめに Go言語を使っていたら見慣れないエラーが出てたので調べてみました。
エラーの内容 試験用にサンプルの日付データを作っていたら、以下のようなコンパイルエラーとなりました。
malformed octal constant malformed integer constant: 08  エラーとなった原因のコードはこちらです。
t = time.Date(2016, time.Month(11), 08, 00, 00, 00, 00, time.Local)  原因 Go言語は先頭に0が付いた数値を8進数だと認識します。08は8進数としては存在しない値のためエラーとなってしまうのでした。同様に、09も同じエラーとなります。
対策 単純に対策をするのであれば、以下のように08から0を除いてしまえばエラーは解消されます。
t = time.Date(2016, time.Month(11), 8, 00, 00, 00, 00, time.Local)  どうしても08、09と記載したい、そんなときには、数値を&amp;rdquo;で囲って文字列として指定しておき、文字列から数値に変換させれば大丈夫です。ただし、標準で用意されているstrconv.Atoi関数は2つの戻り値を返すので、そのままでは使えません。以下のように、変換用の関数を用意する必要があります。
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;time&amp;quot; ) func main() { t := time.Date(2016, time.Month(atoi(&amp;quot;11&amp;quot;)), atoi(&amp;quot;08&amp;quot;), atoi(&amp;quot;00&amp;quot;), atoi(&amp;quot;00&amp;quot;), atoi(&amp;quot;00&amp;quot;), atoi(&amp;quot;00&amp;quot;), time.Local) fmt.Println(t) } func atoi(str string) int { num, err := strconv.</description>
    </item>
    
    <item>
      <title>Go言語で構造体のスライスを扱ってみる</title>
      <link>http://foresukecom.github.io/post/struct_slice/</link>
      <pubDate>Wed, 30 Nov 2016 21:24:20 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/struct_slice/</guid>
      <description>Go言語で構造体のスライスを扱おうとしたときに少し悩んだので、まとめておきます。
ここで構造体やスライスについて詳しく説明はしません。詳細はA Tour of Goなどに記載されているので、そちらをご確認下さい。 今回は、構造体を要素として持つスライスを扱う方法をまとめています。
いろいろな操作  要素にする構造体
今回の説明で使用する構造体は以下の通り定義されています。 社員番号(number)と名前(name)を持つ社員(employee)型です。スライスで複数人の社員情報をまとめて扱うようなイメージです。
type employee struct { number int name string }  スライスの作成
以下のようにmake関数を使えば、要素数が0のemployee型のスライスを作成することが出来ます。
employees := make([]employee, 0)  スライスの作成と初期化をまとめて行うこともできます。
employees := []employee{employee{1, &amp;quot;Taro&amp;quot;}}  複数の要素を持つスライスを1行で書くことも可能です。
employees := []employee{employee{1, &amp;quot;Taro&amp;quot;}, employee{2, &amp;quot;Jiro&amp;quot;}, employee{3, &amp;quot;Saburo&amp;quot;}}  要素の追加
既存のスライスに対して、要素を追加させるには以下のように記載します。
employees = append(employees, employee{4, &amp;quot;Shiro&amp;quot;})  要素の削除
組込み関数にはスライスの要素を削除する仕組みは実装されていません。そのため、個別に関数を作成する必要があります。例としては、以下のような関数で要素の削除機能が実現できます。
func delete(employees []employee, n int) []employee { result := make([]employee, 0) for i, v := range employees { if i !</description>
    </item>
    
    <item>
      <title>ご挨拶</title>
      <link>http://foresukecom.github.io/post/about/</link>
      <pubDate>Tue, 29 Nov 2016 23:25:30 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/about/</guid>
      <description>ご挨拶 はじめまして、foresukeです。
これはIT系の技術ブログになる予定です。サーバサイド、フロントエンド、インフラと広く浅く、学習した内容を公開していきます。
記載している内容への質問や指摘については、Twitterからお願いします。</description>
    </item>
    
    <item>
      <title>Amazonアソシエイト 参加表明文</title>
      <link>http://foresukecom.github.io/post/amazon/</link>
      <pubDate>Mon, 28 Nov 2016 12:17:44 +0900</pubDate>
      
      <guid>http://foresukecom.github.io/post/amazon/</guid>
      <description>当ブログはamazon.co.jpを宣伝しリンクすることによってサイトが紹介料を獲得できる手段を提供することを目的に設定されたアフィリエイト宣伝プログラムであるAmazonアソシエイト・プログラムの参加者です。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foresukecom.github.io/post/20171017_cloudshell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foresukecom.github.io/post/20171017_cloudshell/</guid>
      <description>cd blo &amp;mdash; title: &amp;ldquo;CloudShellでのブログ執筆環境&amp;rdquo; slug: &amp;ldquo;ClougShell_hugo&amp;rdquo; tags: [&amp;ldquo;GCP&amp;rdquo;, &amp;ldquo;ClougShell&amp;rdquo;] date: 2017-10-17T22:08:58+09:00 draft: false
author: &amp;ldquo;foresuke&amp;rdquo; ブログ環境 こんにちは、ブログを再開した@foresukeです。
実は諸事情によりメインのPCをChoromeBookを使っています。ChoromeBookはブラウザと、Androidアプリしか使えない端末です。なので基本的にはネットワークに接続していることが前提となっており、スタンドアローンではまともに使うことができません。
本ブログは、hugoと呼ばれる静的サイトジェネレータで構築しています。静的サイトジェネレータについては以下のサイトに詳しく書かれているので、ここでは省略します。
脱WordPress！静的サイトの特徴やメリットなどのまとめ
静的サイトジェネレータの運用方法としては、ローカル上でhtml/cssファイルを生成し、webサーバにアップロードして公開する、といった流れを繰返すことになります。 僕がChromeBookを使っており、ローカル上でhtml/cssファイルを生成できないので、GoogleClougShellをローカル環境として使うことにしました。
CloudShellはDebianベースのGoogleComputeEngineに開発ツールがインストールされた状態で提供される仮想マシンで、ブラウザから手軽にアクセスできる環境です。がっつり開発するには向きませんが、手軽な開発ツールとして重宝しています。
Debianベースということもあるので、勉強がてらvimを使おうと四苦八苦していましたが、CloudShellにクラウド版エディタがベータとして提供されたので使ってみました。 クラウド版エディタでmarkdownファイルを編集したところ、画面の右側にプレビューがリアルタイムで表示されました。 これはなかなか便利で、ブログ記事を書くのはクラウド版エディタで充分な感じです。
まだ改善の余地はありますが、いい感じにブログ執筆環境ができたので、細々と書いていきます。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foresukecom.github.io/post/20171027_googlehome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foresukecom.github.io/post/20171027_googlehome/</guid>
      <description>hu&amp;mdash; title: &amp;ldquo;Google Home Miniを買いました&amp;rdquo; slug: &amp;ldquo;googlehomemini&amp;rdquo; tags: [&amp;ldquo;Google&amp;rdquo;] date: 2017-10-26T05:56:33+09:00 draft: false
author: &amp;ldquo;foresuke&amp;rdquo; はじめに 先日のGoogleイベントで日本での発売が発表されたGoogle Home Miniを購入しました。
Google Home Miniができることや同封物については以下のようなページで多数公開されているので、ここでは省略します。 Google HomeとGoogle Home Miniの違いはスピーカーの音質程度のようで、動作内容自体に差異は内容です。
手のひらに乗るスマートスピーカ「Google Home Mini」開封の儀
Google Home Miniの電源ポートはマイクロUSBです。次期的にTypr-Cが使われると思っていたので意外なところです。 ただ、僕の身の回りにはマイクロUSBを使っているデバイスがまだ多いので、他のケーブルを流用できるので結果オーライと考えていました。
しかし、下の写真を見ていただくと分かる通り、マイクロUSBポートが本体の奥の方についているので、Google Home Mini自体がケーブルと干渉してしまい、僕の持っている他のケーブルでは代用することができませんでした。
まぁ、持ち運ぶ想定をしていないので仕方がないのですが、ちょっと別の部屋に持っていきたいときには不便でですね(バッテリーも内蔵していないので、給電しながらでないと使えませんし)。 とりあえず、天気やニュースを尋ねたり、音楽を再生したりしましたが、対応しているサービスについては、求めている解答が返ってくるのでとても気持ちがいいです。
僕は滑舌が悪いので、音声認識がうまく動作するか不安だったのですが問題なく使うことができました。 さすがはGoogleさんです。
しかし、対応しているサービスがまだ少ないので、かゆいところに手が届かないと感じる部分も多いです。 例えば、僕はPocket Castsというサービスはを使ってPodcastを聴いているのですが、まだGoogle Home Miniに対応していません。 「未視聴のPodcastを順次再生」とかを音声で指示ができればベストです。
懸念事項 Google Home Miniは物理的にミュートボタンがあるので、マイクを無効にすることもできますが、基本的には音を拾い続けたまま使うことになると思われます。
以下のようなバグもあったようですし、悪意の有無に関わらず、情報が外部に漏れてしまうリスクは考えておくべきでしょう。
Google Home Miniに常時録音してしまうバグ発覚、すでに修正済みで製品版には影響なし
極端に悪意がある例では、ジョージオーウェルの1984に登場するテレスコープを使って、国民の監視をしていました。 現時点でのGoogle Home(Mini)は音を拾うだけですが、今後カメラなどが搭載されると、ますますテレスコープ化していくことになります。
良い例でいうと、自分の家に異常があったことを検知できるので防犯、防災対策に活用することが期待できます。 また、体調の変化をすぐ発見してもらえたり、アリバイの証明に使うこともできるかもしれません。
今後の希望 現在は、一問一答での対話となっているので、正直なところ会話をしている感じではありません。 会話のキャッチボールが長く続けられるのであれば、英会話のレッスンを受けたり、愚痴を聞いてもらったりできそうです。
HoloLensをはじめとする、Mixed Realityのヘッドマウントディスプレイと連携させ、アシスタント用のアバターを仮想空間上に表示することも可能になると思います。 そうすれば、Haloシリーズのコルタナや、PSYCHO-PASSの登場人物 常守茜の部屋にいるクラゲ型アバターのキャンディ、のようにますます愛着を持って扱うことができそうです。
Googleの公式ブログにも記載されているように、開発キットも公開されています。 日本語にも対応し始めたようなので、何か作ってみても面白いかもしれません。
Google アシスタント対応アプリを日本語で開発してみよう</description>
    </item>
    
  </channel>
</rss>